package org.purnamaproject.xui.peer;/** * @(#)JCalendar.java    0.5 18/08/2003 * * The Purnama Project XUI (XML-based User Interface) API is an set of program * calls that utilize the XUI tagset and perform the task of creating a user * interface. The Purnama version of this API is specific using Java as the platform * but other XUI APIs may use other libraries and platforms. The Purnama XUI API * supports the creation of Swing components, adding, deleting and laying out * components. It also supports dynamic binding of business logic to the user * interface. * * Copyright (c) 2003 Arron Ferguson * * This library is free software; you can redistribute it and/or * modify it under the terms of the GNU Lesser General Public * License as published by the Free Software Foundation; either * version 2.1 of the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU * Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA * * For more information, please contact Arron Ferguson at: * e-mail: arron_ferguson@bcit.ca * snail-mail: SW2 - 124, 3700 Willingdon Avenue, Burnaby, British Columbia, Canada, V5G 3H2 * Web: http://xml.bcit.ca/PurnamaProject/ * */import java.awt.Color;import java.awt.Dimension;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.awt.Graphics;import java.awt.Rectangle;import java.awt.Toolkit;import java.net.*;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JTable;import javax.swing.SwingConstants;import javax.swing.table.DefaultTableCellRenderer;import javax.swing.table.JTableHeader;import javax.swing.table.TableCellRenderer;/** * <p><code>JCalendar</code> is a complex widget that keeps track of a calendar. It uses its own   customized <code>TableModel</code> for keeping track of specific dates that may require custom   rendrering other than the usual number being in each cell.   @version    0.5 18/08/2003   @author     Arron Ferguson */public class JCalendar extends JPanel implements ActionListener{    /**     * For clicking on to take the calendar to the next month.     */    private JButton nextButton;    /**     * For clicking on to take the calendar to the previous month.     */    private JButton previousButton;    /**     * Displays the month and the year inside of the calendar layout.     */    protected JLabel label;    /**     * The set of rows and columns used to display dates.     */    protected JTable table;    /**     * Layout that allows for a grid like layout pattern. Components do not have to     * take up exactly one cell, instead they can take up more than one row or column.     */    private GraphPaperLayout gp;    /**     * A custom <code>TableModel</code> for dealing with specifically calendar like cells.     */    private CalendarTableModel model;    /**     * Default constructor     */    public JCalendar()    {        super();        configUI();        nextButton.addActionListener(this);        previousButton.addActionListener(this);    }    /**     * Configures the UI and sets up the renderers.     */    private void configUI()    {        gp = new GraphPaperLayout(new Dimension(8, 10));        setLayout(gp);        nextButton = new JButton("Next");        previousButton = new JButton("Back");        label = new JLabel("");        model = new CalendarTableModel(this);        table = new JTable(model)        {            // a renderer that changes the color of the background of a cell            TableCellRenderer dateCellRenderer = new DefaultTableCellRenderer()            {                {                    this.setBackground(new Color(255, 0, 0));                }            };            // a renderer that uses image icons to render            TableCellRenderer happyFaceRenderer = new DefaultTableCellRenderer()            {                {                    URL url = JCalendar.class.getResource("/media/happyface.gif");                    this.setIcon(new ImageIcon(url));                    this.setVerticalTextPosition(JLabel.CENTER);                    this.setHorizontalTextPosition(JLabel.LEFT);                }            };            // the table cell renderer that uses different renderers            public TableCellRenderer getCellRenderer(int row, int column)            {                try                {                    if( (model.getCurrentDate() == Integer.parseInt(((String)model.getValueAt(row, column))))                        && model.getCurrentMonth() == model.getMonth()                        && model.getCurrentYear() == model.getYear())                            return happyFaceRenderer;                } catch(NumberFormatException e)                {                    ;                }                return super.getCellRenderer(row, column);            }        };        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);        // don't allow rows or columns to be selected        table.setCellSelectionEnabled(true);        table.setColumnSelectionAllowed(false);        table.setRowSelectionAllowed(false);        // don't allow cells to be selected        table.setFocusable(false);        // little bit of customization of cell renderers        JLabel cell = (JLabel)table.getDefaultRenderer(JLabel.class);        cell.setHorizontalAlignment(SwingConstants.LEFT);        cell.setVerticalAlignment(SwingConstants.TOP);        table.getTableHeader().setReorderingAllowed(false);        // add buttons        add(previousButton, new Rectangle(0, 0, 2, 1));        add(nextButton, new Rectangle(6, 0, 2, 1));        // add label        add(label, new Rectangle(3, 0, 2, 1));        add(table.getTableHeader(), new Rectangle(0, 2, 8, 1));        add(table, new Rectangle(0, 3, 8, 7));        // now call it for a populate        model.generateCalendarMonth(0);    }    /**     * Handles the two <code>JButton</code>s events for going forward and backward       in the years.       @param e the <code>ActionEvent</code> given.     */    public void actionPerformed(ActionEvent e)    {        if(e.getSource() == nextButton)        {            model.generateCalendarMonth(1);        } else if(e.getSource() == previousButton)        {            model.generateCalendarMonth(-1);        }    }    /**     * Custom paint to allow cells to change height based on the size of the <code>Container</code>       that the table is in.       @param g the <code>Graphics</code> context used to paint the table.     */    public void paint(Graphics g)    {        super.paint(g);        // make row height resize as the component is resized so that rows fill up the space        float componentHeight = (float)table.getHeight();        float numberofRows = (float)table.getRowCount();        float tableCellHeight = (componentHeight / numberofRows);        int height = (int)tableCellHeight;        table.setRowHeight(height);    }    /**     *  Returns the preferred size of this composite component.       @return the width and height of this component as a <code>Dimension</code> object and as       its preferred size to be rendered.     */    public Dimension getPreferredSize()    {        return new Dimension(310, 220);    }    /**     * Returns the minimum size that this composite component should be drawn at.       @return the minimum width and height that this component should be rendered at.     */    public Dimension getMinimumSize()    {        return new Dimension(260, 170);    }    /**     * For running this program.     */    public static void main(String[] args)    {        JCalendar jc = new JCalendar();        JFrame frame = new JFrame("calendar");        frame.getContentPane().add(jc);        Dimension frameD = new Dimension(310, 220);        Dimension screenD = new Dimension();        screenD = Toolkit.getDefaultToolkit().getScreenSize();        if(frameD.width >= screenD.width)            frame.setLocation(1, 1);        frame.setLocation(((screenD.width - frameD.width)/2), ((screenD.height - frameD.height)/2));        frame.setSize(frameD.width, frameD.height);        frame.addWindowListener(new WindowAdapter()            {                public void windowClosing(WindowEvent e)                {                System.exit(0);                    }            }        );        frame.setVisible(true);    }}